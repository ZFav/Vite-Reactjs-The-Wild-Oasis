Style component
libreria da imparare per stile.

npm i styled-components

const H1 = styled.h1`
  font-size: 30px;
  font-weight: 600;
`;
scrivere direttamente dentro il componente 


SUPABASE

 npm i --save @supabase/supabase-js




 REACT QUERY

npm i @tanstack/react-query@4

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 60 * 1000,
    },
  },
});

queryclient nell app.jsx permette di iniziare la query e scegliere il timer da rendere il prodotto invalido cosicche lo refecha

questi due sono quelli che devono essere messi dentro la app.jsx
<QueryClientProvider client={queryClient}>
      <ReactQueryDevtools initialIsOpen={false} />

 npm i @tanstack/react-query-devtools


per usare le query 

const {
    isLoading,
    data: cabins,
    
  } = useQuery({
    queryKey: ["cabin"],
    queryFn: getCabins,
  });

cosiche li prende e fa la funzione, la queryfn prende la fx del getCabins dal api

per mutare le query

 const { isloading: isDeleting, mutate } = useMutation({
    mutationFn: (id) => deleteCabins(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["cabin"] });
    },
  });

questo ci permette di chiamare il hook iniziale, e di poter mutarlo 
const queryClient= useQueryClient()




npm i react-hot-toast  per le notification

va nel app.jsx



























npm i --save-dev vite-plugin-eslint eslint-config-react-app eslint
creare .eslintrc.json aggiungere { "extends": "react-app" }
nel vite.config.js aggiungere import eslint from "vite-plugin-eslint"; nel plugins: [react(),eslint()],

react router 
npm i react-router-dom@6


react icons
npm i react-icons    